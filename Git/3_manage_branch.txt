Git保存快照：
	为每一个文件计算校验和，并在Git仓库中用blob对象保存文件快照
	为根目录和每一个子目录计算校验和，并保存为树对象，记录目录结构和blob对象索引
	创建一个提交对象，包含指向根目录树对象的指针和所有提交信息
	第二次提交，提交对象中会包含指向上一次提交对象的指针
	Git的分支，本质上是指向提交对象的可变指针，默认分支名是master，每次进行提交，master分支自动向前移动
	使用git branch可以创建一个可移动的新分支
	Git使用HEAD，一个指针指向当前所在的本地分支
git log --decorate查看各个分支当前所指对象
git checkout <branch> 切换分支
git log --oneline --decorate --graph --all 查看项目的分支分叉情况
git checkout -b <branch> 创建并切换分支，相当于：
	git branch <branch>
	git checkout <branch>
git checkout <branch> 当本地不存在该分支且有个名字与之匹配的远程分支时，相当于：
git checkout --track <remote>/<branch> 相当于：
git checkout -b <local_branch> <remote>/<branch> 基于远程分支的基础上创建本地跟踪分支，并切换到本跟踪地分支
git merge <branch> 合并分支
git branch -d <branch> 删除分支
git mergetool 可视化合并工具
冲突文件解冲突以后，加入暂存区再提交
git branch -v 查看所有分支的最后一次提交
git branch --merged <branch> 查看已合并到当前分支的分支（可以删除，不会失去任何东西）
		   --no-merged <branch> 查看尚未合并到当前分支的分支
git ls-remote <remote> 获取远程引用的完整列表
git remote show <remote> 获取远程分支的信息
git clone -o <remote> 拉取仓时为远程仓服务器命名
git remote -vv 列出本地所有分支及其跟踪分支
git fetch --all 所有本地分支从跟踪的远程分支上抓取数据
git pull 从当前分支跟踪的远程分支上抓取数据，并尝试合并，相当于：
	git fetch + git merge
git push <remote> --delete <branch> 删除远程分支，通常只是移除指针，数据保留到垃圾回收运行
变基：相对于直接合并（git merge），最终结果一致，但是提交历史更简洁
	git rebase <base_branch> <topic_branch> 相当于：git checkout <base_branch>;git rebase <topic_branch>
	git checkout <topic_branch>
	git merge <base_branch>
git rebase --onto master server client 取出client分支，找出从server分支分歧以后的提交，然后把这些提交在master分支上重放一遍，让client看起来像是直接基于 master修改一样

变基 vs. 合并:
只对尚未推送或分享给别人的本地修改执行变基操作清理历史， 从不对已推送至别处的提交执行变基操作，这样，你才能享受到两种方式带来的便利。










